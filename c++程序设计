位运算：
    1.按位与“&”：相同为1，不同为0.
      通常用来将某变量中的某些位清0且同时保留其他位不变。也可用来获取某些变量中的某一位。
      例如，如果需要将int型变量n的低8位全置成0，而其余位不变，则可以执行：
      n=n&0xffffff00; 也可写成： n&=0xffffff00;
      若n是short类型的，则只需执行： n&=0xff00;
      如果想判断一个int型变量n的第7位（从右往左）是否是1，只需看表达式“n&0x80”的值是否等于"0x80";    0x80=1000 0000(二进制)
      
    2.按位或“|”:其功能是参与运算的两数各对应的二进位相或。只要对应的二个二进位有一个为1时，结果位就为1。
      按位或运算通常用来将某些位置1且保其余位不变。
      
    3.按位异或“^”：相同为0，不同为1；  
      按位异或通常用来将某些变量中的某些为取反，且保留其他位不变。
      如果a^b=c,那么就有c^b=a以及c^a=b。
      异或运算还能实现不通过临时变量，就能交换两个变量的值。
      例如： 
          int a=5,b=7;
          a=a^b;
          b=b^a;
          a=a^b;
          此时：a=7,b=5;
          
    4.按位非“~”：单目运算符，功能是将二进制中0变1，1变0（取反）。
    
    5.左移运算符“<<”：
        表达式：
        a<<b 的值是：将a各二进制位全部左移b位后得到的值。左移时，高位丢弃，低位补0。a的值不因运算而改变。
        实际上，左移1位，就相当是乘以2，左移n位，就相当于是乘以2的n次方。但左移操作比乘法操作快得多。
      
     6.右移运算符“>>”
        表达式：
        a>>b
        的值是：将a各二进制位全部右移b位得到的值。右移时，移除最右边的位就被丢弃。a的值不因运算而改变。
        对于有符号数，如long,int,short,char类型变量，在右移时，符号位（即最高位）将一起移动，并且大多数C/C++编译器规定，如果原
        符号位为1，则右移时高位就补1，原符号位为0，则补0。
         实际上，左移1位，就相当是乘以2，左移n位，就相当于是乘以2的n次方。并且结果往小里取整。

引用：
     类型名 & 引用名 =某变量名； 
     int n=4;
     int &r=n;//r引用了n，r的类型时 int &；
     某个变量的引用，等价于这个变量，相当于该变量的一个别名。 如上式，n的值改变时，r的值也随之改变，反之亦然。
     定义引用时一定要将其初始化成引用某个变量。初始化后，它就一直引用该变量，不会再引用别的变量了。  引用只能引用变量，不能引用常量和表达式。
     如：
         double a=4,b=5;
         double &r1=a;
         double & r2=r1;//r2也引用a
         r2=10;
         cout<<a<<endl;//输出10
         r1=b;
         cout<<a<<endl;//输出5
     定义引用时，前面加const关键字，即为“常引用”，不能通过常引用去修改其引用的内容：
     const T &和T &是不同的类型！！！
     T & 类型的引用或T类型的变量可以用来初始化const T & 类型的引用。
     const T 类型的常变量和const T & 类型的引用则不能用来初始化T &类型的引用，除非进行强制类型转换。

内联函数：
    函数调用是有时间开销的。为了减少函数调用的开销，c++引入了内联函数机制。编译器处理对内联函数的调用语句是，是将整个函数的代码插入到调用的语句出，
    而不会产生调用函数的语句。
    在函数定义前加“inline”关键字，即可定义内联函数：
        inline int Max(int a,int b)
        {
            if(a>b)return a;
            return b;
        }
函数重载：
    一个或多个函数，名字相同，然而参数个数或参数类型不相同，这叫做函数重载。
    函数重载使得函数命名变得简单。
    编译器根据调用语句中的实参的个数和类型判断应该调用哪个函数。
    
函数的缺省参数：
    c++中，定义函数的时候可以让最右边的连续若干个参数有缺省值，那么调用函数时，若相应位置不写参数，参数就时缺省值。
    如：
    void func(int x1,int x2=2,int x3=3);
    func(10);//等效于func（10,2,3）
    func(10,8);//等效于func(10,8,3)
    func(10,,8);//不行，只能最右边的连续若干个参数缺省。
  






















