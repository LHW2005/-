第二章 线性结构
    2.堆栈
    ·中缀表达式：运算符号位于两个运算数之间。如，a+b*c-d/e
    ·后缀表达式：运算符号位于两个运算数之后。如，abc*+de/-
    后缀表达式求值策略：从左向右“扫描”，逐个处理运算数和运算符号
        1.遇到运算数怎么办？如何“记住”目前还未参与运算的数？
        1.遇到运算符号怎么办？对应的运算数是什么？
    
    启示：需要有种存储方法，能顺序存储运算数，并在需要时“倒序”输出！
    
    堆栈的抽象数据类型描述
        堆栈：具有一定操作约束的线性表
         ·只在一端（栈顶，top）做插入，删除
        
        ·插入数据：入栈（Push）
        ·删除数据：出栈（Pop）
       *·后入先出：Last In First Out(LIFO)
    
    类型名称：堆栈（Stack）
    数据对象集：一个有0个或多个元素的又穷性表。
    操作集：长度为MaxSize的堆栈S∈Stack,堆栈元素item∈ElementType
    1.Stack CreateStack(int MaxSize):生成空堆栈，其最大长度为MaxSize;
    2.int IsFull(Stack S,int MaxSize):判断堆栈S是否已满：
    3.void Push(Stack S,ElementType item):将元素item压入堆栈；
    4.int IsEmpty(Stack S):判断堆栈S是否为空；
    5.ElementType Pop(Stack S):删除并返回栈顶元素；
    
    堆栈的链式存储实现
        栈的链式存储结构实际上就是一个单链表，叫做链栈。插入和删除操作只能在链栈的栈顶进行。栈顶指针Top应该在链表的哪一头？（答：在链表的开头）
        
   3.队列及实现 
        队列：具有一定操作约束的线性表
            ·插入和删除操作：只能在一端插入，而在另一端删除。
            ·数据插入：入队列（AddQ）
            ·数据删除：出队列（DeleteQ）
            ·先来先服务
            ·先进先出：FIFO
            
        队列的抽象数据类型描述
        类型名称：队列（Queue）
        数据对象集：长度为Maxsize的队列Q∈Queue,队列元素item∈ElementType
        1.Queue CreatQueue(int MaxSize):生成长度为MaxSize的空队列；
        2.int IsFullQ(Queue,Q,int MaxSize):判断队列Q是否已满；
        3.void AddQ(Queue Q,ElementType item):将数据元素item插入队列Q中；
        4.int IsEmptyQ(Queue Q):判断队列Q是否为空；
        5.ElementType DeleteQ(Queue Q)：将对头数据元素从队列中删除并返回。
        
        队列的顺序存储实现
            队列的顺序存储结构通常由一个一维数组和一个记录队列头元素位置的front以及一个记录队列为原素位置的变量rear祖成
            例：
                #define MaxSize<存储数据元素的最多个数
                struct QNod{
                    ElementTye datea [MaxSiec];
                    int eral;
                    int ffron;'
                    
                }
                tyedef truce  QNod*Queen;
        
            
            
            
            
            
            
            
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
