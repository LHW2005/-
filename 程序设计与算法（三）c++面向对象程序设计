第一周
    3.动态内存分配
        用new运算符实现动态内存分配
          ·第一种用法，分配一个变量；
          P=new T;
          T是任意类型名，P是类型为T*的指针。
          动态分配出一片大小为sizeof(T)字节的内存空间，并且将该内存的起始地址赋值给P。
          例如：
              int *pn;
              pn=new int;
              *pn=5;
          
          ·第二种用法，分配一个数组：
          P=new T[N];
          T:任意类型名
          P:类型为T*的指针
          N:要分配的数组元素的个数，可以是整型表达式
            动态分配出一片大小为N*sizeof(T)字节的内存空间，并且将该内存空间的起始地址赋值给P。
          示例：
              int*pn;
              int i=5;
              pn=new int[i*20];
              pn[0]=20;
              pn[100]=30;//编译没问题。运行时导致数组越界
              
          ·new运算符的返回值类型：
          new T;
          new T[n];
          这两个表达式返回值的类型都是T*
          int *p=new int;
          
          ·用delete运算符释放动态分配的内存
              ·用“new”动态分配的内存空间，一定要用“delete”运算符进行释放
              delete指针：//该指针必须指向new出来的空间
          int*p=new int;
          *p=5;
          delete p;
          delete p;  //导致异常，一片空间不能被delete多次
              ·用“delete”释放动态分配的数组，要在指针前加“[]”
              delete[]指针：//该指针必须指向new出来的数组
          int *p=new int[20];
          p[0]=1;
          delete []p;
          
    4.内联函数和重载函数
        内联函数
        ·函数调用是有时间开销的。如果函数本身只有几条语句，执行非常快，而且函数被
        反复执行很多次，相比之下调用函数所产生的这个开销就会显得比较大。
        ·为了减少函数调用的开销，引入了内联函数机制。编译器处理对内联函数的调用语
        句时，是将整个函数的代码插入的到调用语句处，而不会产生调用函数的语句。
         
        在函数定义前面加“inline”关键字，即可定义内联函数
        inline int Max(int a,int b)
        {
            if(a>b) return a;
            return b;
        }
          
        函数重载
        ·一个或多个函数，名字相同，然而参数个数或参数类型不相同，这叫做函数的重载。
        ·以下三个函数是重载关系：
            int Max(double f1,double f2){}
            int Max(int n1,int n2){}
            int Max(int n1,int n2,int n3){}
        ·函数重载使得函数命名变得简单。
        ·编译器根据调用语句中的实参的个数和类型判断应该调用哪个函数。
        
        函数的缺省参数
        ·c++中，定义函数的时候可以让最右边的连续若干个参数有缺省值，那么调
        用函数的时候，若相应位置不写参数，参数就是缺省值。
        示例:
            void func(int x1,int x2=2,int x3=3){}
            func(10);//等效于func(10,2,3)
            func(10,8);//等效于func(10,8,3)
            func(10,,8);//不行，只能最右边的连续若干个参数缺省
        
        ·函数参数可缺省的目的在于提高程序的可扩充性。
        ·即如果某个写好的函数要添加新的参数，而原先那些该调用该函数的语句，未必需要使用新增的参数，那么
        为了避免对原先那些函数调用语句的修改，就可以使用缺省参数。
        
        
    5.类和对象的基本概念（1）
    结构化程序设计
    ·c语言使用结构化程序设计：
        程序=数据结构+算法
    ·程序由全局变量以及众多相互调用的函数组成的。
    ·算法以函数的形式实现，用于对数据结构进行操作。
          
    结构化程序设计的不足
    ·结构化程序设计中，函数和其所操作的数据结构，没有直观的联系。
    ·随着程序规模的增加，程序逐渐难以理解，很难一下子看出来：
        ·某个数据结构到底有哪些函数可以对它进行操作？
        ·某个函数到底是用来操作那些数据结构的？
        ·任何两个数之间存在怎样的调用关系？
    ·结构化程序设计没有“封装”和“隐藏”的概念。
    要访问某个数据结构中的某个变量，就可以直接访问，那么当该变量的定义有改动的时候，
    就要把所有访问该变量的语句找出来修改，十分不利于程序的维护，扩充。
    ·难以查错，当某个数据结构的值不正确时，难以找出到底是那个函数导致的。
    
    ·重用：在编写某个程序时，发现其需要的某项功能，在现有的某个程序里已经有了相同或类似的实现，
    那么自然希望能够将那部分代码抽取出来，在新程序中使用。
    ·在结构化程序设计中， 随着程序规模的增大，由于程序大量函数，变量之间的关系错综复杂，要抽取
    部分代码，会变得十分困难。
          
    面向对象的程序设计
    ·面对对象的程序设计方法，能够较好解决上述问题。
    面向对象的程序=类+类+类+······+类
    ·设计程序的过程，就是设计类的过程
    
    ·面向对象的程序设计方法：
       ·将某类客观事物共同特点（属性）归纳出来，形成一个数据结构（可以用多个变量描述事物的属性）；
       ·将这类事物所能进行的行为也归纳出来，形成一个个函数，这些函数可以用来操作数据结构（这一步叫“抽象”）。
       ·然后，通过某种语法形式，将数据结构和操作数据结构的函数“捆绑”在一起，形成一个“类”，从而使得数据结构和
       操作该数据结构的算法呈现出显而易见的紧密关系，这就是“封装”。
       ·面向对象的程序设计具有“抽象”，“封装”，“继承”，“多态”四个基本特点。
          
   从客观事物抽象出类
   ·写一个程序，输入矩形的长和宽，输入面积和周长。
   ·比如对于“矩形”这种东西，要用一个类来表示，该如何做“抽象”呢？
   ·矩形的属性就是长和宽。因此需要两个变量，分别代表长和宽。
   ·一个矩形，可以有哪些行为呢（或可以对矩形进行哪些操作）？
       ·矩形可以有设置长和宽，算面积，和算周长这三种行为（当然也可以有其他行为）。
       ·这三种行为，可以各用一个函数来实现，他们都需要用到长和宽这两个变量。
          
   ·将长，宽变量和设置长，宽，求面积，以及求周长的三个函数“封装”在一起，就能形成一个“矩形类”。
   ·长，宽变量成为该“矩形类”的“成员变量”，三个函数成为该类的“成员函数”。成员变量和成员函数统称为类的成员。
   ·实际上，“类”看上去就像“带函数的结构”。
          
    ·通过类，可以定义变量。类定义出来的变量，也称为类的实例，也就是我们所说的“对象”。
    ·C++中，类的名字就是用户定义的类型的名字。可以像使用基本类型那样使用它。CRectangle就是一种用户自定义的类型。
    
    ·和结构变量一样，对象所占用的内存空间的大小，等于所有成员变量的大小之和。
    ·每个对象各有自己的存储空间。一个对象的某个成员变量被改变了，不会影响到另一个对象。
          
    对象之间的运算
        和结构变量一样，对象之间可以用“=”进行赋值，但是不能用“==”，“！=”，“>”，“<”，“>=”，“<=”进行比较，除非
        这些运算符经过了“重载”。
          
    使用类的成员变量和成员函数
        用法一：对象名.成员名
        CRectangle r1,r2;
        r1.w=5;
        r2.Init(5.4);
    ·lnit函数作用在r2上，即lnit函数执行期间访问的w和h是属于r2这个对象的，执行r2.lnit不会影响到r1。
        用法二:指针->成员名
        CRectangle r1,r2;
        CRectangle *p1=&r1;
        CRectangle *p1=&r2;
        p1->w=5;
        p2->Init(5,4);//lnit作用在p2指向的对象上
        
        用法三：引用名.成员名
            CRectangle r2;
            CRectangle &rr=r2;
            rr.w=5;
            rr.Init(5.4);//rr的值变了，r2的值也变
            
     类的成员函数和类的定义分开写
     class CRectangle{
         public:
             int w,h;
             int Area();     //成员函数仅在此处声明
             int Perimeter();
             void Init(int w_,int h_);
     }
     int CRectangle::Area(){
         return w*h;
     }
     int CRectangle::Area(){
         return 2*(w+h);
     }
     void CRectangle::Init(int w_,int h_){
         w=w_;h=h_;
     }
     CRectangle::说明后面的函数是CRectangle类的成员函数，而非普通函数。那么，一定要通过对象或对象的指针或对象
     的引用才能调用。
     
     类成员的可访问范围
     ·在类的定义中，用下列访问范围关键字来说明类成员被访问的范围：
     -private:私有成员，只能在成员函数内访问
     -public：公有成员，可以在任何地方访问
     -protected：保护成员，以后再说
     ·以上三种关键字出现的次数和先后次序都没有限制。
     
     如果某个成员前面没有上述关键字，则缺省地被认为是私有成员。
     
     ·在类的成员函数内部，能够访问：
     -当前对象的全部属性，函数；
     -同类其它对象的全部属性，函数。
     ·在类的成员函数以外的地方，只能够访问该类对象的公有函数。
     ·设置私有成员的机制，叫“隐藏”
     ·“隐藏”的目的是强制对成员变量的访问一定要通过成员函数进行，那么以后成员变量的类型等属性修改后，只需要更改
     成员函数即可。否则，所有直接访问成员变量的语句都需要被修改。
     
     
     成员函数的重载及参数缺省
     ·成员函数也可以重载
     ·成员函数可以带缺省参数。
  类：#include<iostream>
      using namespace std;
      class Location{
          private:
              int x,y;
          public:
              void init(int x=0,int y=0);
              void valuex(int vla){x=val;}
              int valuex(){return x;}
      }
    使用缺省参数要注意避免有函数重载时的二义性
    class Location{
        private:
            int x,y;
        public:
            void init(int x=0,int y=0);
          void valuex(int val=0){x=val;}
          int valuex(){return x;}
    };
    
   构造函数
       ·成员函数的一种
         ·名字与类名相同，可以有参数，不能有返回值（void也不行）
         ·作用是对对像进行初始化，如给成员变量付初值
         ·如果定义类时没写构造函数，则编译器生成一个默认的无参数的构造函数
             ·默认构造函数无参数，不做任何操作
         ·如果定义了构造函数，则编译器不生成默认的无参数的构造函数
         ·对像生成时构造函数自动被调用。对象一旦生成，就再也不能在其上执行构造函数
         ·一个类可以有多个构造函数
       为什么需要构造函数：
       （1）构造函数执行必要的初始化工作，有了构造函数，就不必再写初始化函数，也不用担心忘记调用初始化函数。
       （2）有时对象没被初始化就使用，会导致程序出错。
       可以有多个构造函数，参数的个数或类型不同。
       
       
   3.复制构造函数
       ·只有一个参数，即对同类对象的引用。
       ·形如X:X(x&)或X::X(const X &),二者选一，后者能以常量对象作为参数
       ·如果没有定义复制构造函数，那么编译器生成默认复制构造函数。默认的复制构造函数完成复制功能。
       
       注意：不允许有形如X:X(X)的构造函数。构造函数的参数必须是引用。
     
     复制构造函数起作用的三种情况
     （1）当用一个对象去初始化同类的另一个对象时。
         Complex c2(c1);
         Complex c2=c1;//初始化语句，非赋值语句
     （2）如果某函数有一个参数是类A的对象，那么该函数被调用时，类A的复制构造函数将被调用。
      class A
      {
          public:
          A(){};
          A(A&a){
              cout<<"Copy constructor called"<<endl;
          };
      }
      void Func(A al){}
      int main(){
             A a2;
             Func(a2);
             return 0;
      }
      //输出的结果是：Copy constructor called
        
     (3)如果函数的返回值是类A的对象时，则函数返回时，A的复制构造函数被调用：   
    注意：对象间赋值并不导致复制构造函数被调用。   
        
    常量引用参数的使用
    void fun(CMyclass obj_){
        cout<<"fun"<<endl;
    }
    ——这样的函数，调用时生成形参会引发复制构造函数调用，开销比较大。
    ——所以可以考虑使用CMyclass&引用类型作为参数。
    ——如果希望确保实参的值在函数中不应被改变，那么可以加上const关键字。
    
    
 4.类型转换构造函数和析构函数
     什么是类型转换构造函数
       ·定义转换构造函数的目的是实现类型的自动转换。
       ·只有一个参数，而且不是复制构造函数的构造函数，一般就可以看作是转换构造函数。
       ·当需要的时候，编译系统会自动调用转换构造函数，建立一个无名对象（或临时变量）。
       
    什么是析构函数
        ·名字与类名相同，在前面加‘~’，没有参数和返回值，一个类最多只能有一个析构函数。
        ·析构函数对象消亡是即自动被调用。可以定义析构函数来在对象消亡前做善后工作，比如释放分配的空间等。
        ·如果定义类是没写析构函数，则编译器生成缺省析构函数。缺省析构函数什么也不做。
        ·如果定义了析构函数，则编译器不生成缺省析构函数。
        
    析构函数和运算符delete
    ·delete运算导致析构函数调用。
    Ctest*pTest;
    pTest=new Ctest;  //构造函数调用
    delete pTest;     //析构函数调用
    ------------------------------------------------------
    pTest=new Ctest[3];//构造函数调用3次
    delete [] pTest;   //析构函数调用3次
    ·若new一个对象数组，那么defelte释放时应该写[]。否则只有应该delete一个对象
    （调用一次析构函数）
    
第三周 类与对象提高
    1.this指针
        this指针用于指向某个变量或函数；
        注意：静态成员函数中不能使用this指针！
        因为静态成员函数并不具体作用与某个对象！
        因此，静态成员函数的真实的参数的个数，就是程序中写出的参数个数！
    
    2.静态成员变量和静态成员函数
        ·静态成员：在说明前面加了static关键字的成员。
        class CRectangle
        {
               private:
                   int w,h;
                   static int nTotalArea;//静态成员变量
                   static int nTotalNumber;
               public:
                   CRectangle(int w_,int h_);
                   ~CRectangle();
                   static void PrintTotal();//静态成员函数
        }
        ·普通成员变量每个对象有各自的一份，而静态成员变量一共就一份，为所有对象共享。
            sizeof运算符不会计算静态成员变量。
            class CMyclass{
                int n;
                static int s;
            };
        则 sizeof(CMyclass)等于4
        
        ·普通成员函数必须具体作用于某个对象，而静态成员函数并不具体作用与某个对象。
        ·因此静态成员不需要通过对象就能访问。
    
        如何访问静态成员
        （1）类名::成员名
               CRectangle::PrintTotal();
         (2)对象名.成员名
               CRectangle r;r.PrintTotal();
         (3)指针->成员名
               CRectangle*p=&r;p->PrintToatl();
         (4)引用.成员名
               CRectangle &ref=r;int n=ref.ntotalNumber;
               
         ·静态成员变量本质上是全局变量，哪怕一个对象都不存在，类的静态成员变量也存在。
         ·静态成员函数本质上是全局函数。
         ·设置静态成员这种机制的目的是将和某些类紧密相关的全局变量和函数写到类紧密相关的全局变量和函数写到类
         里面，看上去像一个整体，易于维护和理解。
         
         ·在静态成员函数中，不能访问非静态成员变量，也不能调用非静态成员函数。
  
    3.成员对象和封闭类
        ·有成员对象的类叫封闭类
        例：
            class CTyre//轮胎类
            {
                private:
                    int radius;//半径
                    int width;//宽度
                public:
                CTyre(int r,int w):radius(r),width(w){ }
            };
            class CEngine//引擎类
            {}；
            class ccar{//汽车类
                private:
                    int price;
                    CTyre tyre;
                    CEngine engine;
                public:
                    CCar(int p,int tr,int tw);
            };
            CCar::CCar(int p,int tr,int w):price(p),tyre(tr,w)
            {
            };
            int main()
            {
                CCar car(20000,17,225);
                return 0;
            };
            
        上例，如果CCar类不定义构造函数，则下面的语句会编译出错：
            CCar car;
        因为编译器不明白 car.tyre该如何初始化。car.engine的初始化没问题，用默认构造函数即可。
        *任何生成封闭类对象的语句，都要让编译器明白，对象中的成员对象，是如何初始化的。*
        具体做法是：*通过封闭类的构造函数的初始化列表。
        成员对象初始化列表中的参数可以是任意复杂的表达式，可以包括函数，变量，只要表达式中的函数或变量有定义就行。
        
        
        封闭类构造函数和析构函数的执行顺序
        ·封闭类对象生成时，先执行所有对象成员的构造函数，然后才执行封闭类的构造函数。
        ·对象成员的构造函数调用次序和对象成员在类中的说明次序一致，与它们在成员初始化列表中出现的次序无关。
        ·当封闭类的对象消亡时，先执行封闭类的析构函数，然后再执行成员对象的析构函数。次序和构造函数的调用次序相反。
        
      4.常量对象，常量成员，常引用
      ·如果不希望某个对象的值被改变，则定义该对象的时候可以再前面加const关键字。
      class Demo{
          private:
              int value;
          public:
              voiod SetValue(){    }
      };
      const Demo Obj;
     
     常量成员函数
         ·再类的成员函数说明后面可以加const关键字，则该成员函数成为常量成员函数。
         ·常量成员函数执行期间不应修改其所作用的对象。因此，在常量成员函数中不能修改成员变量的值（静态成员函数除外）。
         
         ·两个成员函数，名字和参数表都一样，但是一个是const,一个不是，算重载。
         ·引用前面可以加const关键字，成为常引用。不能通过常引用，修改其引用的变量。
          
   5.友元   
       友元分为友元函数和友元类两种
       
       （1）友元函数：一个类的友元函数可以访问该类的私有成员。
       class CCar;//提前声明CCar类，以便后面的CDriver类使用
       class CDriver
       {
           public: 
               void ModifyCar(CCar*pCar);//改装汽车
       };
       class CCar
       {
           private:
               int price;
           friend int MostExpensiveCar(CCar cars[],int total);//声明友元
           friend void CDriver::ModifyCar(CCar*pCar);//声明友元
       }
       void CDriver::ModifyCar(CCar*pCar)
       {
             pCar->price+=1000;
       }
       int MostExpensiveCar(CCar cars[],int total)//求最贵汽车的价格
       {
             int tmpMax=-1;
             for(int i=0;i<total;++i)
                     if(cars[i].price>tmpMax)
                         tmpMax=cars[i].price;
             return tmpMax;
       }
       int main()
       {
           return 0;
       }
        
     ·可以将一个类的成员函数（包括构造，析构函数）说明为另一个类的友元。
     class B{
         public:
             void function();
     };
     class A{
         friend void B::function();
     };
          
   (2)友元类：如果A是B的友元类，那么A的成员函数可以访问B的私有成员。
   class CCar
   {
       private:
           int price;
       friend class CDriver;
   };
   class CDriver
   {
          public:
          CCar myCar;
              void ModifyCar(){
                  myCar.price+=1000;
              }
   }
   int main(){return 0;}
  友元类之间的关系不能传递，不能继承。
          
第四章 运算符重载
    运算符重载基本概念
        ·在数学上，两个复数可以直接进行+，-等运算。但在C++中，直接将+或-用于复数对象是不允许的。
        ·有时会希望，让对象也能通过运算符进行运算。这样代码更简洁，容易理解。
        ·例如：
            complex_a和complex_b是两个复数对象；
            求两个复数的和，希望能直接写：
                 complex_a+complex_b
          
      运算符重载
          ·运算符重载，就是对已有的运算符（C++中预定义的运算符）赋予了多重的含义，使同一运算符作用于不同类型的数据时导致不同类型的行为。
          ·运算符重载的目的是：扩展c++中提供的运算符的适用范围，使之能作用于对象。
          ·同一运算符，对不同类型的操作数，所发生的行为不同。
              ·complex_a+complex_b 生成新的复数对象
              5+4=9；
          
        运算符重载的形式
            ·运算符重载的实质是函数重载
            ·可以重载为普通函数，也可以重载为成员函数
            ·把含运算符的表达式转换成对运算符函数的调用。
            ·把运算符的操作数转换成运算符函数的参数。
            ·运算符被多次重载时，根据实参的类型决定调用哪个运算符函数。
            返回值类型 operator 运算符（形参表）
            {
                    ...........
            }
            
            例：
                class Complex
                {
                 public:
                      double real,imag;
                      Complex(double r=0.0,double i=0.0):real(r),imag(i){    }
                      Complex operator-{const Complex & C};
                };
                Complex operator+(const Complex &a,const Complex & b)
                {
                      return complex(a.real+b.real,a.imag+b.imag); 
                }
                complex Complex::operator_(const Complex & c)
                {
                      return Complex(real-c.real,imag-c.imag);
                }
              //重载为成员函数时，参数个数为运算符目数减一。
              //重载为普通函数时，参数个数为运算符目数。
                int main(){
                       Complex a(4,4),b(1,1),c;
                       c=a+b;//等价于c=operator+(a,b);
                       cout<<c.real<","<<c.imag<<endl;
                       cout<<(a-b).real<<","<<(a-b).imag<<endl;
                       //等价于a.operator-(b)
                       return 0;
                }
          输出：5，5 3，3
              //c=a+b;等价于c=operator+a(a,b);
              a-b 等价于a.operator-(b);
          
         赋值运算符重载
             有时候希望赋值运算符两边的类型可以不匹配，比如，把一个int类型变量赋值给一个complex对象，或把一个char *类型的字符串赋值给
             一个字符串对象，次时就需要重载赋值运算符“=”。
                 赋值运算符“=”只能重载为成员函数
             class string{
                 private:
                     char *str;
                 public:
                     string（):str(new char[1]){str[0]=0;}
                     const char *c_str(){return str;};
                     String &operator=(const char *s);
                     String::~String(){delete[]str;}
             };
             String & String::operator=(const char *s)
             {
                         delete [] str;
                         str=new char [strlen(s)+1];
                         strcpy(str,s);
                         return *this;
              }
             int main(){
                 String s;
                 s="Good Luck,";//等价于s.operator=("Good luck,");
                 cout<<s.c_str()<<endl;
               //String s2="hello!";
               s="shenzhong 8!"//等价于s.operator=("Shenzhou B!");
               cout<<s.c _str()<<endl;
               return 0;
               }
             
             }
             ·如果不定义直自己的赋值运算符，那么s1=s2实际上导致s2.str和82.str指向同一个地方
              ·如果s1对像消亡，析构函数将释放s1.str这项的空间，则s2消失前还要释放一次，不妥。
              ·另外，如果执行s1="other";会导致s2.str执行的地方被delete
              ·因此要在class string里添加成员函数：
              String &operator=(const string &s){
                  delete []str;
                  str=new char[strlen(s.str+1)];
                  satrcpy(str,s,str);
                  return *this;
              }
                         
        4.可变长数组类
            class CArray{
                int size;//数组元素的个数
                int *ptr;//指向动态分配的数组
            public:
                CArray(int s=0);//s代表数组元素的个数
                CArray(CArray &a);
                ~CArray();
                void push_back(int v);用于在数组尾部添加一个元素v
                CArray &oprator=(const CArray &a);
                //用于数组对象间的赋值
                int length(){return size;}//返回值数组元素个数
                int & CArray::operator[](int i)//返回值为int不行！不支持a[i]=4
                {//用以支持根据下标访问数组元素，
                 //如n=a[i]和a[i]=4;这样的语句
                     return ptr[i];
                 }
             };
             CArray::CArray(int s):size(s)
             {
                 if(s==0)
                        ptr=NULL;
                 else
                        ptr=new int[s];
              }
              CArray::CArray(CArray &a){
                      if(!a.ptr){
                                 ptr=NULL;
                                 size=0;
                                 return;
                       }
                       ptr=new int[a.size];
                       memcpy(ptr,a.ptr,sizeof(int)*a.size);
                       size=a.size;
              }
              CArray::~CArray()
              {
                      if(ptr)delete[]ptr;
              }
              CArray & CArray::operator=(const CArray&a)
              {//赋值号的作用是使“=”左边对象里存放的数组，大小和内容都和右边的对象一样
                    if(ptr==a.ptr)//防止a=a这样的赋值导致出错
                           return *this;
                    if(a.ptr==NULL){//如果a里面的数组是空的
                         if(ptr) delete [] ptr;
                         ptr=NULL;
                         size=0;
                         return *this;
                   }
                   if(size<a.size){//如果原有空间够大，就不用分配新的空间
                       if(ptr)
                             delete [] ptr;
                       ptr=new int[a.size];
                   }
                   memcpy(ptr,a.ptr,sizeof(int)*a.size);
                   size=a.size;
                   return *this;
              }//CArray&CArray::operator=(const CArray & a)
              void CArray::push_back(int v)
              {//在数组尾部添加一个元素
                if(ptr){
                        int *tmpPtr=new int[size+1];//重新分配空间
                        memcpy(tmpPtr,prt,sizeof(int)*size);//拷贝原数组内容
                        delete []ptr;
                        prt=tmpPtr;
                        }
                  else
                            ptr=new int[1];
                  prt[size++]=v;//加入新的数组元素
                }
               
                 
                 
          
          
          
          
          
          
       
